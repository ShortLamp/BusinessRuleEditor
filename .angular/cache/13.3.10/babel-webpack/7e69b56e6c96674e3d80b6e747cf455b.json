{"ast":null,"code":"import { moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { Subject } from 'rxjs/internal/Subject';\nimport { installPatch } from \"../Services/patch\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/BusinessRuleEditorService\";\nimport * as i2 from \"@angular/material/card\";\nimport * as i3 from \"@angular/cdk/drag-drop\";\nimport * as i4 from \"../Services/drag-and-drop-manager.directive\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../item/item.component\";\nfunction BusinessRuleRootComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"app-item\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"rule\", item_r1)(\"invert\", ctx_r0.invert)(\"onDragDrop\", ctx_r0.onDragDrop$);\n  }\n}\nexport let BusinessRuleRootComponent = /*#__PURE__*/(() => {\n  class BusinessRuleRootComponent {\n    constructor(businessRuleEditorService) {\n      this.businessRuleEditorService = businessRuleEditorService;\n      this.invert = true;\n      this.onDragDrop$ = new Subject();\n      this.processedData = this.businessRuleEditorService.processedData;\n      this.onDragDrop = event => {\n        if (event.container === event.previousContainer) {\n          moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n        } else {\n          transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n        }\n      };\n    }\n    ngOnInit() {\n      installPatch();\n      this.onDragDrop$.subscribe(this.onDragDrop);\n    }\n  }\n  BusinessRuleRootComponent.ɵfac = function BusinessRuleRootComponent_Factory(t) {\n    return new (t || BusinessRuleRootComponent)(i0.ɵɵdirectiveInject(i1.BusinessRuleEditorService));\n  };\n  BusinessRuleRootComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BusinessRuleRootComponent,\n    selectors: [[\"app-business-rule-root\"]],\n    decls: 5,\n    vars: 2,\n    consts: [[1, \"business-rule-card\"], [\"cdkDropList\", \"\", \"dragAndDropManagerRoot\", \"\", 3, \"cdkDropListData\", \"cdkDropListDropped\"], [4, \"ngFor\", \"ngForOf\"], [3, \"rule\", \"invert\", \"onDragDrop\"]],\n    template: function BusinessRuleRootComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0)(1, \"mat-card-header\");\n        i0.ɵɵtext(2, \" Nested Drag And Drop Cards\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-card-content\", 1);\n        i0.ɵɵlistener(\"cdkDropListDropped\", function BusinessRuleRootComponent_Template_mat_card_content_cdkDropListDropped_3_listener($event) {\n          return ctx.onDragDrop$.next($event);\n        });\n        i0.ɵɵtemplate(4, BusinessRuleRootComponent_ng_container_4_Template, 2, 3, \"ng-container\", 2);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.processedData);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.processedData);\n      }\n    },\n    directives: [i2.MatCard, i2.MatCardHeader, i2.MatCardContent, i3.CdkDropList, i4.DragAndDropManagerRootDirective, i5.NgForOf, i6.ItemComponent],\n    styles: [\".business-rule-card[_ngcontent-%COMP%]{display:block;margin:auto;max-width:32em}\"]\n  });\n  return BusinessRuleRootComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}