{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../BusinessRuleEditorService\";\nimport * as i2 from \"@angular/material/card\";\nimport * as i3 from \"@angular/cdk/drag-drop\";\nimport * as i4 from \"../drag-and-drop-manager.directive\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"../rule-creator/rule-creator.component\";\nfunction ItemComponent_app_rule_creator_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-rule-creator\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rule\", ctx_r0.rule);\n  }\n}\nfunction ItemComponent_mat_card_header_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-card-header\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHtml\", ctx_r1.convertToString(ctx_r1.rule), i0.ɵɵsanitizeHtml);\n  }\n}\nfunction ItemComponent_ng_container_5_mat_card_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card-content\");\n    i0.ɵɵelement(1, \"app-item\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"rule\", item_r4)(\"invert\", !ctx_r3.invert)(\"onDragDrop\", ctx_r3.onDragDrop$);\n  }\n}\nfunction ItemComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ItemComponent_ng_container_5_mat_card_content_1_Template, 2, 3, \"mat-card-content\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.rule.Value);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    invert: a0\n  };\n};\nexport let ItemComponent = /*#__PURE__*/(() => {\n  class ItemComponent {\n    constructor(businessRuleEditorService) {\n      this.businessRuleEditorService = businessRuleEditorService;\n    }\n    ngOnInit() {}\n    convertToString(rule) {\n      if (typeof rule === 'object' && rule !== null && 'RuleType' in rule && rule.RuleType === \"EVAL\") {\n        if ('Field' in rule.Value) {\n          let formattedValue = \"\";\n          if (Array.isArray(rule.Value.Value)) {\n            formattedValue = '[' + rule.Value.Value + ']';\n          } else {\n            formattedValue = rule.Value.Value;\n          }\n          return '<div>\\'' + rule.Value.Field + \"\\'\\t\" + '<strong>' + rule.Value.Operator + '</strong>' + \"\\t\\'\" + formattedValue + '\\'</div>';\n        }\n      } else if (typeof rule === 'object' && rule !== null && 'RuleType' in rule) {\n        return '<strong>' + rule.RuleType + '</strong>' + '\\n' + '        <button *ngIf=\"!isRuleLeaf(this.rule)\" mat-icon-button [matMenuTriggerFor]=\"menu\">\\n' + '            <mat-icon>add</mat-icon>\\n' + '        </button>\\n' + '        <mat-menu #menu=\"matMenu\">\\n' + '            <button mat-menu-item (click)=\"addNewNode(1)\">\\n' + '                <span>And</span>\\n' + '            </button>\\n' + '            <button mat-menu-item (click)=\"addNewNode(2)\">\\n' + '                <span>Or</span>\\n' + '            </button>\\n' + '            <button mat-menu-item (click)=\"addNewItem()\">\\n' + '                <span>Eval</span>\\n' + '            </button>\\n' + '        </mat-menu>';\n      }\n    }\n    isRuleLeaf(rule) {\n      return typeof rule === 'object' && rule !== null && 'RuleType' in rule && rule.RuleType === \"EVAL\";\n    }\n    isEmptyRuleLeaf(rule) {\n      return typeof rule === 'object' && rule !== null && 'RuleType' in rule && rule.RuleType === \"EVAL\" && rule.Value === null;\n    }\n    addNewItem() {\n      if (typeof this.rule === 'object' && this.rule !== null && 'RuleType' in this.rule) {\n        if (Array.isArray(this.rule.Value)) {\n          this.rule.Value.push({\n            id: this.businessRuleEditorService.getAvailableId().toString(),\n            RuleType: \"EVAL\",\n            Value: null\n          });\n        }\n      }\n    }\n    addNewNode(type) {\n      if (typeof this.rule === 'object' && this.rule !== null && Array.isArray(this.rule.Value)) {\n        if ('RuleType' in this.rule) {\n          if (type === 1) {\n            this.rule.Value.push({\n              id: this.businessRuleEditorService.getAvailableId().toString(),\n              RuleType: \"AND\",\n              Value: []\n            });\n          } else if (type === 2) {\n            this.rule.Value.push({\n              id: this.businessRuleEditorService.getAvailableId().toString(),\n              RuleType: \"OR\",\n              Value: []\n            });\n          }\n        }\n      }\n    }\n    addNewOperator() {\n      if (typeof this.rule === 'object' && this.rule !== null && 'RuleType' in this.rule) {\n        if (Array.isArray(this.rule.Value)) {}\n      }\n    }\n  }\n  ItemComponent.ɵfac = function ItemComponent_Factory(t) {\n    return new (t || ItemComponent)(i0.ɵɵdirectiveInject(i1.BusinessRuleEditorService));\n  };\n  ItemComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ItemComponent,\n    selectors: [[\"app-item\"]],\n    inputs: {\n      onDragDrop$: [\"onDragDrop\", \"onDragDrop$\"],\n      invert: \"invert\",\n      rule: \"rule\"\n    },\n    decls: 6,\n    vars: 8,\n    consts: [[\"cdkDrag\", \"\", \"cdkDropList\", \"\", \"dragAndDropManager\", \"\", 1, \"test\", 3, \"cdkDropListData\", \"id\", \"ngClass\", \"cdkDropListDropped\"], [3, \"rule\", 4, \"ngIf\"], [\"class\", \"header\", 3, \"innerHtml\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"rule\"], [1, \"header\", 3, \"innerHtml\"], [4, \"ngFor\", \"ngForOf\"], [3, \"rule\", \"invert\", \"onDragDrop\"]],\n    template: function ItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵlistener(\"cdkDropListDropped\", function ItemComponent_Template_mat_card_cdkDropListDropped_0_listener($event) {\n          return ctx.onDragDrop$.next($event);\n        });\n        i0.ɵɵelementStart(1, \"mat-icon\");\n        i0.ɵɵtext(2, \"drag_indicator\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, ItemComponent_app_rule_creator_3_Template, 1, 1, \"app-rule-creator\", 1);\n        i0.ɵɵtemplate(4, ItemComponent_mat_card_header_4_Template, 1, 1, \"mat-card-header\", 2);\n        i0.ɵɵtemplate(5, ItemComponent_ng_container_5_Template, 2, 1, \"ng-container\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.rule.Value)(\"id\", ctx.rule.id)(\"ngClass\", i0.ɵɵpureFunction1(6, _c0, ctx.invert));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.isEmptyRuleLeaf(ctx.rule));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isEmptyRuleLeaf(ctx.rule));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isRuleLeaf(ctx.rule));\n      }\n    },\n    directives: [i2.MatCard, i3.CdkDrag, i3.CdkDropList, i4.DragAndDropManagerDirective, i5.NgClass, i6.MatIcon, i5.NgIf, i7.RuleCreatorComponent, i2.MatCardHeader, i5.NgForOf, i2.MatCardContent, ItemComponent],\n    styles: [\".invert[_ngcontent-%COMP%]{background-color:var(--gray)}.header[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:center}.test[_ngcontent-%COMP%]{border:3px black;border-radius:10px}\"]\n  });\n  return ItemComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}