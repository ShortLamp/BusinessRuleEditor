{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nlet ItemComponent = class ItemComponent {\n  constructor(businessRuleEditorService) {\n    this.businessRuleEditorService = businessRuleEditorService;\n  }\n  ngOnInit() {}\n  convertToString(rule) {\n    if (typeof rule === 'object' && rule !== null && 'RuleType' in rule && rule.RuleType === \"EVAL\") {\n      if ('Field' in rule.Value) {\n        return rule.Value.Field + \" \" + rule.Value.Operator + \" \" + rule.Value.Value.toString();\n      }\n    } else if (typeof rule === 'object' && rule !== null && 'RuleType' in rule) {\n      return rule.RuleType;\n    }\n  }\n  isRuleLeaf(rule) {\n    return typeof rule === 'object' && rule !== null && 'RuleType' in rule && rule.RuleType === \"EVAL\";\n  }\n  isEmptyRuleLeaf(rule) {\n    return typeof rule === 'object' && rule !== null && 'RuleType' in rule && rule.RuleType === \"EVAL\" && rule.Value === null;\n  }\n  addNewItem() {\n    if (typeof this.rule === 'object' && this.rule !== null && 'RuleType' in this.rule) {\n      if (Array.isArray(this.rule.Value)) {\n        this.rule.Value.push({\n          id: this.businessRuleEditorService.getAvailableId().toString(),\n          RuleType: \"EVAL\",\n          Value: null\n        });\n      }\n    }\n  }\n  addNewNode(type) {\n    if (typeof this.rule === 'object' && this.rule !== null && Array.isArray(this.rule.Value)) {\n      if ('RuleType' in this.rule) {\n        if (type === 1) {\n          this.rule.Value.push({\n            id: this.businessRuleEditorService.getAvailableId().toString(),\n            RuleType: \"AND\",\n            Value: []\n          });\n        } else if (type === 2) {\n          this.rule.Value.push({\n            id: this.businessRuleEditorService.getAvailableId().toString(),\n            RuleType: \"OR\",\n            Value: []\n          });\n        }\n      }\n    }\n  }\n  addNewOperator() {\n    if (typeof this.rule === 'object' && this.rule !== null && 'RuleType' in this.rule) {\n      if (Array.isArray(this.rule.Value)) {}\n    }\n  }\n};\n__decorate([Input('onDragDrop')], ItemComponent.prototype, \"onDragDrop$\", void 0);\n__decorate([Input()], ItemComponent.prototype, \"invert\", void 0);\n__decorate([Input()], ItemComponent.prototype, \"rule\", void 0);\nItemComponent = __decorate([Component({\n  selector: 'app-item',\n  templateUrl: './item.component.html',\n  styleUrls: ['./item.component.css']\n})], ItemComponent);\nexport { ItemComponent };","map":null,"metadata":{},"sourceType":"module"}